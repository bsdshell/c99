#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <AronCLibNew.h>

void free_splitStrChar(char ** retppt, int retRow){
    for(int i = 0; i < retRow; i++){
        if(retppt[i]){
            free(retppt[i]);
            retppt[i] = NULL;
        }
    }
    if(retppt){
        free(retppt);
        retppt = NULL;
    }
}

char** splitStrChar(char* buf, int bufLen, int *retRow, char c){
   int n = 1024;
   int k = 0;
   int count = 0;
   
   bool loop = true;
   bool endLoop = false;
   int maxRow = 2;
   int countRow = 0;
   int inxRow = 0;
   char** retppt = NULL;

   while(loop){
       retppt = (char**)malloc(sizeof(char*)*maxRow);
       for(int i = 0; i < maxRow; i++){
           retppt[i] = (char*)malloc(sizeof(char)*bufLen);
       }
       int inx = 0;
       for(inx = 0; inx < bufLen; inx++){
		 if(inxRow < maxRow){
		   if(buf[inx] != c){
			 retppt[inxRow][k] = buf[inx];
			 k++;
		   }else{
			 if(k >= 0){
			   // NOT '/'
			   retppt[inxRow][k] = '\0';
			   inxRow++;
			   k = 0;
			   if(inxRow < maxRow){
				 // '/'
				 retppt[inxRow][0] = c;
				 retppt[inxRow][1] = '\0';
				 k = 0;
			   }else{
				 free_splitStrChar(retppt, maxRow);
				 maxRow += 10;
				 inxRow = 0;
				 k = 0;
				 break;
			   }
			 }
			 inxRow++; 
			 k = 0;
		   }
		 }else{
		   free_splitStrChar(retppt, maxRow);
		   maxRow += 10;
		   inxRow = 0;
		   k = 0;
		   break;
		 }
	   }
	   
	   if(inx == bufLen){
		 if(inxRow < maxRow){
		   retppt[inxRow][k] = '\0';
		   inxRow++;
		   k = 0;
		   loop = false;
		 }else{
		   free_splitStrChar(retppt, maxRow);
		   maxRow += 10;
		   inxRow = 0;
		   k = 0;
		 }
	   }
   }
   *retRow = inxRow;
   return retppt;
}

char** allocateCharPt(int nCol, int nRow){
  char** ppt = (char**)malloc(sizeof(char*)*nCol);
  for(int c = 0; c < nRow; c++){
	ppt[c] = (char*)malloc(sizeof(char)*nRow);
  }
  return ppt;
}

void free_allocateCharPt(char** ppt, int nCol){
  for(int c = 0; c < nCol; c++){
	if(ppt[c]){
	  free(ppt[c]);
	  ppt[c] = NULL;
	}
  }
  if(ppt){
	free(ppt);
  }
}

void printCharPt2d(char** pt, int nCol){
  for(int i = 0; i < nCol; i++){
	printf("[%s]\n", pt[i]);
  }
}

void fun(char** pt){
  *pt = NULL;
}

// gcc myfile.c -o main
int main () {
   pp("Hello World C!\n");
   {
	 char c = '/';
	 char* str = "/";
	 int bufLen = strlen(str);
	 int retRow = 0;
	 char** retppt = splitStrChar(str, bufLen, &retRow, c);
	 t_int(retRow, 3, " splitStrChar xx 1");
	 t_charPt(retppt[0], "", " splitStrChar xx 2");
	 t_charPt(retppt[1], "/", " splitStrChar xx 2");
	 t_charPt(retppt[2], "", " splitStrChar xx 2");
	 printCharPt2d(retppt, retRow);
   }
   {
	 char c = '/';
	 char* str = "//";
	 int bufLen = strlen(str);
	 int retRow = 0;
	 char** retppt = splitStrChar(str, bufLen, &retRow, c);
	 t_int(retRow, 5,           " splitStrChar 1 ");
	 t_charPt(retppt[0], "",   " splitStrChar 2");
	 t_charPt(retppt[1], "/", " splitStrChar 3");
	 t_charPt(retppt[2], "", " splitStrChar  4");
	 t_charPt(retppt[3], "/", " splitStrChar  5");
	 t_charPt(retppt[4], "", " splitStrChar  5");
	 printCharPt2d(retppt, retRow);
   }
   {
	 char c = '/';
	 char* str = "/tmp/f.x";
	 int bufLen = strlen(str);
	 int retRow = 0;
	 char** retppt = splitStrChar(str, bufLen, &retRow, c);
	 t_int(retRow, 5,           " splitStrChar kk 1 ");
	 t_charPt(retppt[0], "",    " splitStrChar kk 2");
	 t_charPt(retppt[1], "/",   " splitStrChar kk 3");
	 t_charPt(retppt[2], "tmp", " splitStrChar kk 4");
	 t_charPt(retppt[3], "/",   " splitStrChar kk 5");
	 t_charPt(retppt[4], "f.x",   " splitStrChar kk 6");
	 printCharPt2d(retppt, retRow);

   }
   {
	 char c = '/';
	 char* str = "tmp/f.x";
	 int bufLen = strlen(str);
	 int retRow = 0;
	 char** retppt = splitStrChar(str, bufLen, &retRow, c);
	 t_int(retRow, 3,           " splitStrChar ee 1 ");
	 t_charPt(retppt[0], "tmp",   " splitStrChar ee 2");
	 t_charPt(retppt[1], "/", " splitStrChar ee 3");
	 t_charPt(retppt[2], "f.x",   " splitStrChar ee 4");
	 printCharPt2d(retppt, retRow);
   }
   {
	 char c = '/';
	 char* str = "f.x";
	 int bufLen = strlen(str);
	 int retRow = 0;
	 char** retppt = splitStrChar(str, bufLen, &retRow, c);
	 t_int(retRow, 1,           " splitStrChar cc 1 ");
	 t_charPt(retppt[0], "f.x",   " splitStrChar cc 2");
	 for(int i = 0; i < retRow; i++){
	   pp("retppt=%s\n", retppt[i]);
	 }
   }
   {
	 char c = '/';
	 char* str = "/f.x";
	 int bufLen = strlen(str);
	 int retRow = 0;
	 char** retppt = splitStrChar(str, bufLen, &retRow, c);
	 t_int(retRow, 3,           " splitStrChar jj 1 ");
	 t_charPt(retppt[0], "",   " splitStrChar jj 2");
	 t_charPt(retppt[1], "/",   " splitStrChar jj 3");
	 t_charPt(retppt[2], "f.x",   " splitStrChar jj 4");
	 
	 printCharPt2d(retppt, retRow);

   }
   {
	 char c = '.';
	 char* str = "/f.x";
	 int bufLen = strlen(str);
	 int retRow = 0;
	 char** retppt = splitStrChar(str, bufLen, &retRow, c);
	 t_int(retRow, 3,           " splitStrChar bb 1 ");
	 t_charPt(retppt[0], "/f",   " splitStrChar bb 2");
	 t_charPt(retppt[1], ".",   " splitStrChar bb 3");
	 t_charPt(retppt[2], "x",   " splitStrChar bb 4");
	 printCharPt2d(retppt, retRow);
	 
   }
   {
	 char* pt = "abc";
	 fun(&pt);
	 if(pt){
	   pp("pt is NOT NULL\n");
	 }else{
	   pp("pt is NULL\n");
	 }
   }
   
   {
	 int nCol = 1;
	 int nRow = 10;
	 char* str = "";
	 int len = strlen(str);
	 
	 char** ppt = allocateCharPt(nCol, nRow);
	 memcpy(ppt[0], str, len);
	 
	 ppt[0][len] = '\0';

	 char* strPt = concatStr(ppt, nCol);
	 t_charPt(strPt, str, "concatStr test 0");
	 free(strPt);
	 free_allocateCharPt(ppt, nCol);
   }
   {
	 int nCol = 1;
	 int nRow = 10;
	 char* str = "abc";
	 int len = strlen(str);
	 
	 char** ppt = allocateCharPt(nCol, nRow);
	 memcpy(ppt[0], str, len);
	 
	 ppt[0][len] = '\0';

	 char* strPt = concatStr(ppt, nCol);
	 t_charPt(strPt, str, "concatStr test 1");
	 free(strPt);
	 free_allocateCharPt(ppt, nCol);
   }
   {
	 int nCol = 2;
	 int nRow = 10;
	 char* str1 = "dog";
	 char* str2 = "cat";
	 int len1 = strlen(str1);
	 int len2 = strlen(str2);
	 
	 char** ppt = allocateCharPt(nCol, nRow);
	 memcpy(ppt[0], str1, len1);
	 memcpy(ppt[1], str2, len2);
	 
	 ppt[0][len1] = '\0';
	 ppt[1][len2] = '\0';
	 

	 char* strPt = concatStr(ppt, nCol);
	 t_charPt(strPt, "dogcat", "concatStr test 2");
	 free(strPt);
	 free_allocateCharPt(ppt, nCol);
   }
   {
	 int nCol = 2;
	 int nRow = 10;
	 char* str1 = "";
	 char* str2 = "cat";
	 int len1 = strlen(str1);
	 int len2 = strlen(str2);
	 
	 char** ppt = allocateCharPt(nCol, nRow);
	 memcpy(ppt[0], str1, len1);
	 memcpy(ppt[1], str2, len2);
	 
	 ppt[0][len1] = '\0';
	 ppt[1][len2] = '\0';
	 
	 char* strPt = concatStr(ppt, nCol);
	 t_charPt(strPt, "cat", "concatStr test 3");
	 pp("strPt=%s\n", strPt);
	 
	 free(strPt);
	 free_allocateCharPt(ppt, nCol);
   }
   
   {
	 int nCol = 3;
	 int nRow = 10;
	 char* str1 = "cat";
	 char* str2 = "dog";
	 char* str3 = "cowfox";
	 int len1 = strlen(str1);
	 int len2 = strlen(str2);
	 int len3 = strlen(str3);
	 
	 char** ppt = allocateCharPt(nCol, nRow);
	 memcpy(ppt[0], str1, len1);
	 ppt[0][len1] = '\0';
	 memcpy(ppt[1], str2, len2);
	 ppt[1][len2] = '\0';
	 memcpy(ppt[2], str3, len3);
	 ppt[2][len3] = '\0';
	 
	 char* strPt = concatStr(ppt, nCol);
	 t_charPt(strPt, "catdogcowfox", "concatStr test 4");
	 t_int(strlen(strPt), len1 + len2 + len3, " concatStr check length 1");
	 pp("strPt=%s\n", strPt);
	 
	 free(strPt);
	 free_allocateCharPt(ppt, nCol);
   }
   return(0);
}
